import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

class pair{
    int y;
    int x;
    boolean witch; //고슴도치이면 true, 뮬이면 false

    public pair(int y, int x, boolean witch) {
        this.y = y;
        this.x = x;
        this.witch = witch;
    }
}

public class Main {

    public static int R, C;
    public static int[] Dy = {-1, 1, 0, 0};
    public static int[] Dx = {0, 0, -1, 1};
    public static char[][] map;
    public static int[][] count;
    public static Queue<pair> queue;
    public static boolean flag;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        R = Integer.parseInt(st.nextToken());
        C = Integer.parseInt(st.nextToken());
        map = new char[R][C];
        count = new int[R][C];
        queue = new LinkedList<>();
        int  hedgehog_y = 0, hedgehog_x = 0;

        flag = false;

        for(int i=0; i<R; i++){
            String s = br.readLine();
            for(int j=0; j<C; j++){
                map[i][j] = s.charAt(j);
                //물은 여러 개 들어오기 때문에 물을 일단 먼저 넣고 고슴도치의 위치를 기억한 후 고슴도치를 넣어주는 게 좋다.
                if(map[i][j] == '*'){
                    queue.add(new pair(i, j, false));
                }else if(map[i][j] == 'S'){
                    hedgehog_y = i;
                    hedgehog_x = j;
                }
            }
        }

        queue.add(new pair(hedgehog_y, hedgehog_x, true));

        if(!bfs()){
            System.out.println("KAKTUS");
        }

    }

    public static boolean bfs(){

        while(!queue.isEmpty()){
            //1. 큐에서 꺼냄
            pair current = queue.poll();
            int currentY = current.y;
            int currentX = current.x;
            boolean currentWitch = current.witch;

            //3. 연결된 곳을 순회
            for(int i=0; i<4; i++){
                int newY = currentY + Dy[i];
                int newX = currentX + Dx[i];

                //새로운 좌표가  map 범위 안에 있음
                if(newY >= 0 && newY < R && newX >= 0 && newX < C){

                    //4. 갈 수 있는가?
                    if(currentWitch == false){
                        //1. 새로 갈 곳에 이미 물이 있으면 갈 필요 없음
                        //2. 새로 갈 곳이 비버의 굴이라면 갈 수 없음
                        //3. 새로 갈 곳이 돌이라면 갈 수 없음
                        if(map[newY][newX] == '*' || map[newY][newX] == 'D' || map[newY][newX] == 'X'){
                            continue;
                        }else{
                            //5. 체크인
                            //세로 갈 곳에 물이 갔음을 표시
                            map[newY][newX] = '*';
                            //6. 큐에 넣음
                            queue.add(new pair(newY, newX, false));
                        }
                    }
                    //4. 갈 수 있는가?
                    //고슴도치
                    if(currentWitch == true) {
                        //1. 새로 갈 곳에 물이 있으면 갈 수 없음
                        //2. 이미 간 곳이면 갈 필요 없음
                        //3. 새로 갈 곳이 돌이라면 갈 수 없음
                        //4. 새로 갈 곳이 비버 굴이라면 비버 굴까지 간 후 끝내면 됨
                        if(map[newY][newX] == '*' || map[newY][newX] == 'X' || count[newY][newX] != 0){
                            continue;
                        }else if(map[newY][newX] == 'D'){
                            //2. 목적지인가?
                            count[newY][newX] = count[currentY][currentX] + 1;
                            System.out.println(count[newY][newX]);
                            return true;
                        }else{
                            //5. 체크인
                            count[newY][newX] = count[currentY][currentX] + 1;
                            //6. 큐에 넣음
                            queue.add(new pair(newY, newX, true));
                        }
                    }
                }

            }

        }

        return false;
    }
}
